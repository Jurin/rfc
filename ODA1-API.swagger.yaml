# This file can be rendered e.g. by pasting the raw github file url in http://petstore.swagger.io
swagger: '2.0'
info:
  title: EBMeDS API for ODA (ALPHA)
  description: >
    RESTful FHIR resources for clinical decision support in ODA 1. This is a preview,
    some endpoint names may change, some JSON properties may change.
  version: "0.1.0-alpha"
# the domain of the service
host: oda.ebmedscloud.org
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json+fhir
paths:
  #######
  # CDS Hooks
  #######
  '/cds-services':
    get:
      summary: Available CDS Hooks
      description: >
        The cds-services endpoint returns information about the available CDS services
        (i.e. events/hooks) that *EBMeDS* may subscribe to. These event hooks follow the
        [CDS Hooks](http://cds-hooks.org/) standard. These services are also listed in
        this API description.
      tags:
        - CDS Hooks
      responses:
        200:
          description: An array of CDS Hooks services
          schema:
            type: array
            items:
              $ref: '#/definitions/cds-services'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/cds-services/filled-questionnaire':
    post:
      summary: Send a QuestionnaireResponse to EBMeDS for analysis.
      description: >
        Post a single filled-out FHIR Questionnaire (i.e. a QuestionnaireResponse)
        to EBMeDS. Returns a [CDS Hook Card](http://cds-hooks.org/#cds-service-response)
        that contains a Bundle of ActivityDefinitions, i.e.
        suggestions that can be both for patients and for practitioners.
      parameters:
        - name: questionnaire-cds-request
          in: body
          description: A CDS Hook call with the QuestionnaireResponse as payload.
          required: true
          schema:
            $ref: '#/definitions/questionnaire-cds-request'
      tags:
        - CDS Hooks
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/questionnaire-cds-response'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/cds-services/patient-view':
    post:
      summary: The full set of analysis as produced by the EBMeDS engine. FHIR API is TBD.
      description: >
        Produce reminders and links from the given patient data. This utilizes the entire set of
        EBMeDS engine functions as seen in EBMeDS 1.0. Reminders are in regard to diagnoses,
        medication dosage, medication interactions, allergies, pregnancy and lactation.
      parameters:
        - name: dss-fhir-request
          in: body
          description: The FHIR form of the EBMeDS DSSRequest format. TBD.
          required: true
          schema:
            $ref: '#/definitions/dss-fhir-request'
      tags:
        - CDS Hooks
      responses:
        200:
          description: EBMeDS 1.0 response message
          schema:
            $ref: '#/definitions/dss-fhir-response'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'


  ########
  # Questionnaire catalogue
  ########
  # NOTE: It looks like we might push the questionnaires to ODA2 instead, so this API is unneeded.
  # '/questionnaires':
  #   get:
  #     summary: List the available questionnaires
  #     description: List the latest versions of all published FHIR questionnaires
  #     produces:
  #       - 'application/json'
  #     tags:
  #       - Questionnaire database
  #     responses:
  #       200:
  #         description: 'OK'
  #         schema:
  #           $ref: '#/definitions/list-questionnaires'
  #       401:
  #         description: Unauthorized
  #         schema:
  #           $ref: '#/definitions/Error'
  #       500:
  #         description: Internal Server Error
  #         schema:
  #           $ref: '#/definitions/Error'
  #       default:
  #         description: Unknown error
  #         schema:
  #           $ref: '#/definitions/Error'
  # '/questionnaires/{id}':
  #     get:
  #       summary: Get the latest version of a specific FHIR questionnaire.
  #       description: The latest published FHIR version of a questionnaire with this id.
  #       parameters:
  #         - name: id
  #           in: path
  #           description: The questionnaire ID.
  #           required: true
  #           type: integer
  #       tags:
  #         - Questionnaire database
  #       responses:
  #         200:
  #           description: OK. Return Questionnaire FHIR resource.
  #           schema:
  #             $ref: '#/definitions/questionnaire'
  #         401:
  #           description: Unauthorized
  #           schema:
  #             $ref: '#/definitions/Error'
  #         404:
  #           description: Not found
  #           schema:
  #             $ref: '#/definitions/Error'
  #         500:
  #           description: Internal Server Error
  #           schema:
  #             $ref: '#/definitions/Error'
  #         default:
  #           description: Unknown error
  #           schema:
  #             $ref: '#/definitions/Error'
  # '/questionnaires/{id}/{version}':
  #     get:
  #       summary: Get a specific version of a questionnaire.
  #       description: A specific version of a published FHIR questionnaire with this id. The versions can be found at '/questionnaires'.
  #       parameters:
  #         - name: id
  #           in: path
  #           description: The questionnaire ID.
  #           required: true
  #           type: integer
  #         - name: version
  #           in: path
  #           description: The version number
  #           required: true
  #           type: integer
  #       tags:
  #         - Questionnaire database
  #       responses:
  #         200:
  #           description: OK. Return Questionnaire FHIR resource.
  #           schema:
  #             $ref: '#/definitions/questionnaire'
  #         401:
  #           description: Unauthorized
  #           schema:
  #             $ref: '#/definitions/Error'
  #         404:
  #           description: Not found
  #           schema:
  #             $ref: '#/definitions/Error'
  #         500:
  #           description: Internal Server Error
  #           schema:
  #             $ref: '#/definitions/Error'
  #         default:
  #           description: Unknown error
  #           schema:
  #             $ref: '#/definitions/Error'


  ########
  # Coaching (i.e. STAR)
  ########
  '/coaching/dailyMessages':
    get:
      summary: Receive list of coaching messages from active coaching programs for all users.
      description: >
        STAR generates a daily list of messages to be sent to those users who have one or more
        active coaching programs. This endpoint supplies this list.
      tags:
        - Coaching
      responses:
        200:
          description: A bundle of FHIR **Communication** resources.
          schema:
            $ref: '#/definitions/star-daily-messages'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/coaching/dailyMessages/user/{userID}':
    get:
      summary: Receive list of coaching messages for a specific user.
      parameters:
        - name: userID
          in: path
          description: The unique user ID as used elsewhere in the system, presumably a UUID
          required: true
          type: string
          format: uuid
      tags:
        - Coaching
      responses:
        200:
          description: A bundle of FHIR **Communication** resources.
          schema:
            $ref: '#/definitions/star-daily-messages'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/coaching/programs':
    get:
      summary: Receive a list of available coaching programs.
      tags:
        - Coaching
      responses:
        200:
          description: An array of key/name pairs.
          schema:
            $ref: '#/definitions/star-coaching-programs'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/coaching/users':
    post:
      summary: Create a new user for STAR coaching.
      parameters:
        - name: userID
          in: formData
          required: true
          type: string
          format: string
      tags:
        - Coaching
      responses:
        201:
          description: User created.
          schema:
            type: string
            description: The user ID of the created user
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409: # userID already exists
          description: Conflict, probably since userID already exists.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
  '/coaching/users/{userID}':
    get:
      summary: Receive list of coaching programs for a specific user.
      parameters:
        - name: userID
          in: path
          description: The unique user ID as used elsewhere in the system, presumably a UUID
          required: true
          type: string
          format: uuid
      tags:
        - Coaching
      responses:
        200:
          description: An array of XXX.
          schema:
            $ref: '#/definitions/coaching-program-status'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a new program for user.
      parameters:
        - name: userID
          in: path
          description: The unique user ID as used elsewhere in the system, presumably a UUID
          required: true
          type: string
          format: uuid
        - name: programName
          in: query
          description: The ID of the type of STAR coaching program.
          required: true
          type: string
      tags:
        - Coaching
      responses:
        201:
          description: Coaching program created.
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        409: # userID already exists
          description: Conflict, probably since userID already exists
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'

  '/coaching/users/{userID}/programs/{programName}':
    get:
      summary: Get status of given coaching program.
      parameters:
        - name: userID
          in: path
          description: The unique user ID as used elsewhere in the system, presumably a UUID
          required: true
          type: string
          format: string
        - name: programName
          in: path
          required: true
          description: One of the program names (see above)
          type: string
      tags:
        - Coaching
      responses:
        200:
          description: TODO.
          schema:
            type: array
            items:
              $ref: '#/definitions/star-coaching-program'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Change status of coaching program for user.
      parameters:
        - name: userID
          in: path
          description: The unique user ID as used elsewhere in the system, presumably a UUID
          required: true
          type: string
          format: uuid
        - name: programName
          in: path
          description: The ID of the type of STAR coaching program.
          required: true
          type: string
        - name: state
          in: query
          description: The new state of the affected coaching program.
          required: true
          type: string
      tags:
        - Coaching
      responses:
        200:
          description: Coaching program state changed.
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unknown error
          schema:
            $ref: '#/definitions/Error'

definitions:
  dss-fhir-response:
    type: object
    description: TBD.
  dss-fhir-request:
    type: object
    description: TBD.
#    properties:
#      patient:
#        type: object
#        properties:
#          reference:
#            type: string
#            description: TODO
#            example: 'Patient/example'
#      resourceType:
#        type: string
#        enum:
#        - 'Bundle'
#      id:
#        type: string
#        # format: uuid?
#      entry:
#        type: array
#        items:
#          $ref: '#/definitions/dss-fhir-request-entry'
#  dss-fhir-request-entry:
#    type: object
  cds-services:
    type: object
    description: Standard CDS Hook response
    properties:
      services:
        type: array
        items:
          type: object
          properties:
            hook:
              type: string
              description: Hook name
              example: questionnaire-completed
            name:
              type: string
              description: Human readable service name
              example: ODA Questionnaire analysis service
            description:
              type: string
              description: Longer description of service
              example: This is a longer description of a hypothetical CDS Hook service.
            id:
              type: string
              description: The {id} portion when calling this service at {baseURL}/cds-services/{id}
              example: questionnaire-cds
            prefetch:
              type: object
              description: >
                An object containing key/value pairs of FHIR queries to data that this service
                would like the EHR prefetch and provide on each service call. The key is a string
                that describes the type of data being requested and the value is a string
                representing the FHIR query.
              example:
                questionnaireResponse: 'QuestionnaireResponse/Patient.id'
  questionnaire-cds-request:
    type: object
    description: >
      A standard CDS Hook call, with the QuestionnaireResponse resource in the prefetch
      property. See http://cds-hooks.org/#calling-a-cds-service for details.
    properties:
      hookInstance:
        type: string
        format: uuid
        description: A UUID for this particular hook call.
        example: d1577c69-dfbe-44ad-ba6d-3e05e953b2ea
      fhirServer:
        type: string
        format: url
        description: The base URL for the EHR's FHIR server. The scheme should be https.
        example: 'https://hooks.smarthealthit.org:9080'
      hook:
        type: string
        enum:
          - questionnaire-completed
        description: The hook name as given in the catalogue. In this call, always set to 'questionnaire-completed' # TODO is this a good hook name?
      redirect:
        type: string
        format: url
        description: The URL that a Link Card should redirect to. Unused for other card types.
        example: 'http://hooks2.smarthealthit.org/service-done.html'
      user:
        type: string # TODO: enum and regex to only allow Practitioner/123, Patient/123 and RelatedPerson/123 where 123 is id
        description: >
          The FHIR resource type and id representing the current user, i.e. the one
          calling the service. The type is one of Practitioner, Patient or RelatedPerson
        example: Practitioner/123
      context:
        # TODO should perhaps the QuestionnaireResponse be here instead? It's not stored in the FHIR server, is it?
        type: object
        description: >
          Hook-specific contextual data that the CDS service will need. Especially data
          that can not be gotten from the FHIR server.
      patient:
        type: string
        description: The FHIR Patient.id in the current context.
        example: '1288992'
      prefetch:
        type: object
        description: The meat of the hook call. We need the QuestionnaireResponse and Patient resources.
        properties:
          questionnaireResponse:
            type: object
            properties:
              response:
                type: object
                description: If this resource was gotten from a FHIR server, what was its HTTP response?
                properties:
                  status:
                    type: string
                    description: HTTP response code from the FHIR server
                    example: 200 OK
              resource:
                $ref: '#/definitions/questionnaireResponse'
          patient:
            type: object
            properties:
              response:
                description: If this resource was gotten from a FHIR server, what was its HTTP response?
                type: object
                properties:
                  status:
                    type: string
                    description: HTTP response code from FHIR server
                    example: 200 OK
              resource:
                $ref: '#/definitions/patient'
  patient:
    description: "A FHIR Patient resource. NOTE: The data should be anonymized! EBMeDS minimum requirements are birthDate and gender"
    type: object
    properties:
      birthDate:
        type: string
        format: date
        example: "1976-07-12"
      gender:
        type: string
        enum:
          - male
          - female
          - other
          - unknown
        example: female
    # TODO more properties needed in Patient?

  questionnaire:
    type: object
    description: Questionnaire resource (FHIR) with Duodecim extensions
    properties:
      concept:
        type: array
        description: TODO
        items:
          type: object
          properties:
            code:
              type: string
              description: TODO
      date:
        type: string
        format: date-time
        description: TODO
      extension:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: object
          description: 'selfCareInstructions extension'
          properties:
            url:
              type: string
              format: url
              enum:
              - 'https://www.ebmeds.org/form#selfCareInstructions'
            extension:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  valueString:
                    description: TODO
                    type: string
                    format: url
      id:
        type: string
        example: "QUESTIONNAIRE1"
      identifier:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: object
          properties:
            system:
              type: string
              format: url
              example: "https://www.ebmeds.org/form/api/FHIR/forms/export/701"
            value:
              type: string
              example: "701"
      item:
        $ref: '#/definitions/questionnaire-item'
      language:
        type: string
        description: "A two-letter language code, ISO 639-1."
        example: "fi"
      meta:
        type: object
        properties:
          lastUpdated:
            type: string
            format: dateTime
          versionId:
            type: string
      publisher:
        type: string
      copyright:
        type: string
      resourceType:
        description: 'Always "Questionnaire"'
        type: string
        enum:
        - "Questionnaire"
      status:
        type: string
        enum:
        - draft
        - published
        - retired
      text:
        type: object
        properties:
          div:
            type: string
            format: xml
          status:
            type: string
            enum:
              - generated
              - extensions
              - additional
              - empty
            example: "generated"
      title:
        type: string
        description: TODO
      url:
        type: string
        description: TODO
        format: url
      useContext:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: object
          properties:
            coding:
              type: array
              minItems: 1
              maxItems: 1
              items:
                type: object
                properties:
                  code:
                    type: string
                    example: 123
                  system:
                    type: string
                    format: url
                    description: TODO
                    example: 'http://questionnaire/types'

  questionnaire-item:
    # This might have to be split up into different definitions depending on the question type. Not all props are present in all types etc.
    description: "A Questionnaire item. Can be nested, Swagger has trouble showing that."
    type: array
    items:
      type: object
      properties:
        item:
          $ref: '#/definitions/questionnaire-item' # doesn't seem to show properly
        concept:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              code:
                type: string
              display:
                type: string
                example: 'ICD-10'
              system:
                type: string
                example: 'urn:1.2.246.537.6.1'
        enableWhen:
          type: array
          items:
            type: object
            description: 'Condition for when to show this item'
            properties:
              answerString:
                type: string
              question:
                type: string
                description: 'ID of another question'
        linkId:
          type: string
        text:
          type: string
        type:
          type: string
        option:
          type: array
          items:
            type: object
            properties:
              valueCoding:
                type: object
                properties:
                  code:
                    type: string
                    description: TODO
                  display:
                    type: string
                    description: TODO
                  id:
                    type: string
                    description: TODO
        repeats:
          description: TODO
          type: boolean

  questionnaireResponse:
    type: object
    properties:
      resourceType:
        description: 'Always "QuestionnaireResponse".'
        type: string
        example: QuestionnaireResponse
        enum:
        - QuestionnaireResponse
      id:
        type: string
        example: "QUESTIONNAIRERESPONSE1-PATIENT2"
      questionnaire:
        type: object
        properties:
          reference:
            type: string
            description: The reference to the original Questionnaire that was filled out.
            example: "Questionnaire/QUESTIONNAIRE1"
      status:
        type: string
        description: The status of this QuestionnaireResponse. In practice this should never be 'stopped' or 'entered-in-error' when being sent to EBMeDS.
        example: completed
        enum:
        - in-progress
        - completed
        - amended
        - entered-in-error
        - stopped
      subject:
        type: object
        description: A reference to the subject of this Questionnaire, usually a Patient.id
        properties:
          reference:
            type: string
            example: "Patient/PATIENT2"
#      author:
#        type: object
#        description: A reference to the author of the Questionnaire, in practice this is Duodecim.
#        properties:
#          reference:
#            type: string
#            example: "Practitioner/PRACTITIONER1"
#      authored:
#        type: string
#        format: date
#        description: When was the questionnaire first authored?
#        example: '2017-03-20'
      item:
        type: array
        items:
          $ref: '#/definitions/questionnaireResponse-item'
  questionnaireResponse-item:
    type: object
    properties:
      item:
        $ref: '#/definitions/questionnaireResponse-item' # recursion, doesn't seem to work very well to show
      linkId:
        type: string
        example: "1161"
        description: "ID of a specific question"
      answer:
        type: array
        description: The actual answers to a specific question. May contain many answers, usually only one.
        items:
          type: object
          description: We may have many answers, but each object may only contain one of the listed properties.
          properties:
            valueBoolean:
              type: boolean
            valueDecimal:
              type: number
              format: float
            valueInteger:
              type: integer
            valueDate:
              type: string
              format: date
            valueDateTime:
              type: string
              format: date-time
            valueString:
              type: string
      text:
        type: string
        description: >
          Human readable description of whatever it is this item measures (probably from Snomed CT)
  questionnaire-cds-response:
    type: object
    description: CDS response cards
    properties:
      cards:
        type: array
        items:
          type: object
          description: Card containing suggestions, for both the patient and practitioner.
          properties:
            summary:
              type: string
            indicator:
              type: string
              enum:
                - success
            detail:
              type: string
            suggestions:
              type: array
              items:
                $ref: '#/definitions/questionnaire-activity-definition'
  questionnaire-activity-definition:
    type: object
    description: FHIR ActivityDefinition based on a filled-out Questionnaire
    properties:
      resourceType:
        type: string
        description: Always 'ActivityDefinition'
        enum:
          - ActivityDefinition
      identifier:
        type: array
        minItems: 1
        maxItems: 1
        items:
          type: object
          properties:
            rule:
              type: string
            reminder:
              type: string
      description:
        type: string
        description: Human-readable message given to the user/practitioner.
      code:
        type: object
        properties:
          coding:
            type: array
            items:
              type: object
              properties:
                system:
                  type: string
                  description: E.g. DMPReminderLevel or some other official code system
                display:
                  type: string
                  description: Short description of the activity suggested, for e.g. a button to click.
                code:
                  type: string
                  description: The actual code.
      timingPeriod:
        type: object
        properties:
          start:
            type: string
            format: date-time
          end:
            type: string
            format: date-time
      participant:
        type: object
        properties:
          type: # TODO are type and role correctly described?
            type: string
            enum:
              - patient
              - practitioner
          role:
            type: string
      title:
        type: string
      kind:
        type: string
        enum:
          - Observation
          - TODO # TODO
      copyright:
        type: string
        enum:
          - "Kustannus Oy Duodecim, 2017"

  list-questionnaires:
    type: array
    description: Array of all available and published Questionnaire FHIR resources.
    items:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        url:
          type: string
          format: url
        createdAt:
          type: string
          format: date
          description: The date when the form was first created
        modifiedAt:
          type: string
          format: dateTime
          description: The date when the latest form version was published
        versions:
          type: array
          description: Array of all version numbers of a form, and their publish dates
          items:
            type: object
            properties:
              id:
                type: integer
                description: Version ID, not the same as the questionnaire ID.
              createdAt:
                type: string
                format: dateTime
                description: Creation date of this version of the questionnaire
    example:
      - id: 1
        title: Example questionnaire one
        url: http://ebmedscloud.org/api/v1/questionnaires/1
        createdAt: '2017-01-24T13:10:02.3'
        modifiedAt: '2017-03-24T16:40:53.0'
        versions:
          - id: 3
            createdAt: '2016-01-24T09:09:09.9'
          - id: 2
            createdAt: '2012-02-22T09:09:09.9'
      - id: 2
        title: Example questionnaire two
        url: http://ebmedscloud.org/api/v1/questionnaires/1
        createdAt: '2016-01-24T09:09:09.9'
        modifiedAt: '2017-03-24T16:45:00.0'
        versions:
          - id: 5
            createdAt: '2016-01-24T09:09:09.9'
          - id: 4
            createdAt: '2012-01-24T09:09:09.9'
          - id: 2
            createdAt: '2010-01-24T09:09:09.9'
  star-daily-messages:
    type: object
  star-coaching-programs:
    type: object
  coaching-program-status:
    type: object
    properties:
      patient:
        type: string
        description: User ID
      program:
        type: string
        description: Name of coaching program
      status:
        type: string
        description: Status code of program. E.g. 'fi.duodecim.star.coaching.status.end'
  star-coaching-program:
    type: object

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
    example:
      code: 500
      message: 'Some error message'
